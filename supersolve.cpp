//ToDO —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–≤—è–∑—É–≤–∞—á –∑ –ø—Ä–µ–¥–∞–Ω–æ—é –¥–æ—à–∫–æ—é +
//ToDO —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —è–∫—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤–∂–µ –ø–æ–∫—Ä–∏—Ç—ñ –¥–æ–º—ñ–Ω–æ +
//ToDO –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –Ω–µ–ø–æ–∫—Ä–∏—Ç–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ –¥–ª—è –¥–æ–º—ñ–Ω–æ +
//ToDO –†–æ–∑–≤—è–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å—ñ—é +
//ToDO –í–∏–≤—ñ–¥ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å +
#include "solvedominosa.h"
#include <iostream>
#include <algorithm>
#include <limits>
using namespace std;
pair<int, int> minmax(int a, int b) { //—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –¥–ø–æ–ø–æ–º–æ–≥–∏
    return {min(a, b), max(a, b)};
}
dominosa_solve::dominosa_solve(const board& b) : d_board(b) {//—Ä–æ–∑–≤—è–∑—É–≤–∞—á –∑ –¥–æ—à–∫–æ—é —è–∫–∞–∫ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è
    num_max = 0; //—Ç—É—Ç –º–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –Ω–∞ –Ω–∞—à—ñ–π –¥–æ—à—Ü—ñ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É –¥–æ–º—ñ–Ω–æ
    for (int i = 0; i < d_board.get_r(); ++i) {
        for (int j = 0; j < d_board.get_c(); ++j) {
            if (d_board.get_val(i, j) > num_max) {
                num_max = d_board.get_val(i, j);
            }
        }
    }
    is_cover.assign(d_board.get_r(), vector<bool>(d_board.get_c(), false)); // üõ†Ô∏è –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ board -> d_board
    init_dominosa();
}
void dominosa_solve::init_dominosa() {//—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–±–æ—Ä—É –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–æ–º—ñ–Ω–æ
    map<pair<int, int>, int> domino_counts;
    int rows = d_board.get_r();
    int cols = d_board.get_c();
    if ((rows * cols) % 2 != 0) {
        cerr << "Invalid board size: odd number of cells." << endl;
        exit(1);
    }
    for (int i = 0; i < rows; ++i) {//–ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ—Ä–∏–∑.–¥–æ–º—ñ–Ω–æ
        for (int j = 0; j < cols - 1; ++j) {
            pair<int, int> domino = minmax(d_board.get_val(i, j), d_board.get_val(i, j + 1));
            domino_counts[domino]++;
        }
    }
    for (int i = 0; i < rows - 1; ++i) {//–ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–µ—Ä—Ç–∏–∫. –¥–æ–º—ñ–Ω–æ
        for (int j = 0; j < cols; ++j) {
            pair<int, int> domino = minmax(d_board.get_val(i, j), d_board.get_val(i + 1, j));
            domino_counts[domino]++;
        }
    }
    domino_available.clear();
    for (const auto& pair : domino_counts) {
        if (pair.second != 1) {
            cerr << "Invalid input: domino " << pair.first.first << "-" << pair.first.second
                 << " appears " << pair.second << " times." << endl;
            exit(1);
        }
        domino_available[pair.first] = true;
    }
}
pair<int, int> dominosa_solve::grab_next_cell() {//–º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –¥–æ–º–≤–Ω–æ
    int best_row = -1, best_col = -1;
    int minimum_option = numeric_limits<int>::max();
    for (int i = 0; i < d_board.get_r(); ++i) {//–ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        for (int j = 0; j < d_board.get_c(); ++j) {
            if (!is_cover[i][j]) {//—Ç—É—Ç —è–∫—â–æ –≤ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î
                int option = 0;
                int value_1 = d_board.get_val(i, j);
                if (d_board.is_val(i + 1, j) && !is_cover[i + 1][j]) {//–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤–µ—Ä—Ç–∏–∫–∞–ª–Ω—å–æ–≥–æ –¥–æ–º—ñ–Ω–æ
                    int value_2 = d_board.get_val(i + 1, j);
                    if (domino_available.count(minmax(value_1, value_2)) && domino_available[minmax(value_1, value_2)]) {
                        option++;
                    }
                }
                if (d_board.is_val(i, j + 1) && !is_cover[i][j + 1]) {//–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—â–∫–Ω–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –¥–æ–º—ñ–Ω–æ
                    int value_2 = d_board.get_val(i, j + 1);
                    if (domino_available.count(minmax(value_1, value_2)) && domino_available[minmax(value_1, value_2)]) {
                        option++;
                    }
                }
                if (option < minimum_option) {//–Ω–∞–π–º–µ–Ω—à–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ä—Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
                    minimum_option = option;
                    best_row = i;
                    best_col = j;
                } else if (option == minimum_option && best_row == -1) {
                    best_row = i;
                    best_col = j;
                }
            }
        }
    }
    return {best_row, best_col};// –ø–æ–≤–µ—Ä—Ç–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–∞–º–æ—ó –∫—Ä—É—Ç–æ—ó –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏
}

bool dominosa_solve::super_solve_recurse() {//–≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —Ä–æ–∑–≤—è–∑—É—î–º —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å—ñ—é
    pair<int, int> next_cell = grab_next_cell();
    int i = next_cell.first;
    int j = next_cell.second;
    if (i == -1) {
        return true; // –í—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ–∫—Ä–∏—Ç—ñ, —Ä–æ–∑–≤'—è–∑–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ
    }
    int value_1 = d_board.get_val(i, j);
    if (d_board.is_val(i, j + 1) && !is_cover[i][j + 1]) {//–¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –¥–æ–º—ñ–Ω–æ
        int value_2 = d_board.get_val(i, j + 1);
        pair<int, int> domino = minmax(value_1, value_2);
        if (domino_available.count(domino) && domino_available[domino]) {
            is_cover[i][j] = true;
            is_cover[i][j + 1] = true;
            domino_available[domino] = false;
            find_solution.push_back({{i, j}, {i, j + 1}});
            if (super_solve_recurse()) {
                return true;
            }
            find_solution.pop_back();//—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
            domino_available[domino] = true;
            is_cover[i][j] = false;
            is_cover[i][j + 1] = false;
        }
    }
    if (d_board.is_val(i + 1, j) && !is_cover[i + 1][j]) {//–¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–º—ñ–Ω–æ
        int value_2 = d_board.get_val(i + 1, j);
        pair<int, int> domino = minmax(value_1, value_2);
        if (domino_available.count(domino) && domino_available[domino]) {
            is_cover[i][j] = true;
            is_cover[i + 1][j] = true;
            domino_available[domino] = false;
            find_solution.push_back({{i, j}, {i + 1, j}});
            if (super_solve_recurse()) {//–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è
                return true;
            }
            find_solution.pop_back();//—è–∫—â–æ —Ä–µ–∫—É—Ä—Å—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—å –ø–æ—Ç–æ—á–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤—É—î—Ç—å—Å—è
            domino_available[domino] = true;
            is_cover[i][j] = false;
            is_cover[i + 1][j] = false;
        }
    }
    return false;// —è–∫—â–æ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –¥–æ–º—ñ–Ω–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
}
bool dominosa_solve::solve() {
    return super_solve_recurse();
}
void dominosa_solve::show_solution() const {//—Ü–µ –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å
    int row = d_board.get_r();
    int col = d_board.get_c();
    vector<vector<bool>> horizontal_dominosa(row, vector<bool>(col - 1, false));//–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏—Ö —Ç–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏—Ö –¥–æ–º—ñ–Ω–æ
    vector<vector<bool>> vertical_dominosa(row - 1, vector<bool>(col, false));
    for (const auto& dom : find_solution) {// –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Å—ñ—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ä–æ–∑–≤'—è–∑–∫—É
        int row1 = dom.first.row;
        int col1 = dom.first.col;
        int row2 = dom.second.row;
        int col2 = dom.second.col;
        if (row1 == row2) {// –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ –¥–æ–º—ñ–Ω–æ
            horizontal_dominosa[row1][min(col1, col2)] = true;
        } else {
            vertical_dominosa[min(row1, row2)][col1] = true;
        }
    }
    for (int a = 0; a < row; ++a) {// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Unicode —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤—ñ—à–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è 
        for (int b = 0; b < col; ++b) {// –≤–∏–≤–æ–¥–∏–º–æ —á–∏—Å–ª–∞ —Ç–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ –∑—î–¥–Ω–∞–Ω–Ω—è
            cout << " " << d_board.get_val(a, b) << " ";//–¥–ª—è –≤–∏–≤–æ–¥—É —á–∏—Å–ª–∞ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
            if (b < col - 1) {
                if (horizontal_dominosa[a][b]) {
                    cout << "‚ïê"; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Unicode —Å–∏–º–≤–æ–ª –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç. –ª—ñ–Ω—ñ—ó
                } else {
                    cout << " ";
                }
            }
        }
        cout << endl;
        if (a < row - 1) {// –≤–∏–≤–æ–¥–∏–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ –∑–¥–Ω–∞–Ω–Ω—è
            for (int b = 0; b < col; ++b) {
                if (vertical_dominosa[a][b]) {
                    cout << " ‚ïë "; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Unicode —Å–∏–º–≤–æ–ª –¥–ª—è –≤–µ—Ä—Ç–∏–∫. –ª—ñ–Ω—ñ—ó
                } else {
                    cout << "   ";
                }
                if (b < col - 1) {
                    cout << " ";
                }
            }
            cout << endl;
        }
    }
}